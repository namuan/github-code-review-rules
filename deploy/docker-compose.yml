version: "3.8"

services:
  app:
    build:
      context: ..
      dockerfile: deploy/Dockerfile
    container_name: github-pr-rules-analyzer
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - DEBUG=False
      - HOST=0.0.0.0
      - PORT=8000
      - DATABASE_URL=sqlite:///app/data/app.db
      - GITHUB_TOKEN=${GITHUB_TOKEN:-}
      - GITHUB_API_BASE_URL=https://api.github.com
      - LLM_API_KEY=${LLM_API_KEY:-}
      - LLM_API_BASE_URL=https://api.openai.com/v1
      - LLM_MODEL=gpt-4
      - LLM_MAX_TOKENS=1000
      - LLM_TEMPERATURE=0.3
      - SECRET_KEY=${SECRET_KEY:-}
      - LOG_LEVEL=INFO
      - LOG_FILE=/app/logs/app.log
    volumes:
      - ../app:/app
      - app_data:/app/data
      - app_logs:/app/logs
      - app_backups:/app/backups
    depends_on:
      - redis
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  redis:
    image: redis:7-alpine
    container_name: github-pr-rules-analyzer-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  nginx:
    image: nginx:alpine
    container_name: github-pr-rules-analyzer-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - app-network
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Database (optional - for production use PostgreSQL)
  postgres:
    image: postgres:15-alpine
    container_name: github-pr-rules-analyzer-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=github_pr_rules
      - POSTGRES_USER=appuser
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U appuser -d github_pr_rules"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring and logging
  prometheus:
    image: prom/prometheus:latest
    container_name: github-pr-rules-analyzer-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"
    networks:
      - app-network

  grafana:
    image: grafana/grafana:latest
    container_name: github-pr-rules-analyzer-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - app-network

  # Development services
  # Uncomment for development
  # pgadmin:
  #   image: dpage/pgadmin4:latest
  #   container_name: github-pr-rules-analyzer-pgadmin
  #   restart: unless-stopped
  #   environment:
  #     - PGADMIN_DEFAULT_EMAIL=admin@example.com
  #     - PGADMIN_DEFAULT_PASSWORD=admin
  #   ports:
  #     - "8080:80"
  #   volumes:
  #     - pgadmin_data:/var/lib/pgadmin
  #   networks:
  #     - app-network

  # Redis Commander (for Redis monitoring)
  # redis-commander:
  #   image: rediscommander/redis-commander:latest
  #   container_name: github-pr-rules-analyzer-redis-commander
  #   restart: unless-stopped
  #   environment:
  #     - REDIS_HOSTS=local:redis:6379
  #   ports:
  #     - "8081:8081"
  #   depends_on:
  #     - redis
  #   networks:
  #     - app-network

volumes:
  app_data:
    driver: local
  app_logs:
    driver: local
  app_backups:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  # pgadmin_data:
  #   driver: local

networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
